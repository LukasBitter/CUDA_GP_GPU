#include "Indice2D.h"
#include "cudaTools.h"

#include <stdio.h>

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/
__global__ void histogramme(uchar* ptrDevTabData, int nTabData, int* ptrDevHisto);

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

static __device__ void reductionIntraThread(uchar* ptrDevTabData, int nTabData, int* ptrDevHisto);
static __device__ void reductionInterBloc(uchar* ptrDevTabData, int nTabData, int* ptrDevHisto);

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/**
 * output : void required !!
 */
__global__ void histogramme(uchar* ptrDevTabData, int nTabData, int* ptrDevHisto))
    {
    extern __shared__ int tabSM[];

    //TODO init tabSM
    // initSM -> pattern d'entrelacement
    reductionIntraThread(ptrDevTabData, nTabData, ptrDevHisto);
    __syncthreads();
    reductionInterBloc(ptrDevTabData, ptrDevHisto);
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

__device__ void reductionIntraThread(uchar* ptrDevTabData, int nTabData, int* ptrDevHisto)
    {
    const int NB_THREAD = Indice2D::nbThread();
    const int TID = Indice2D::tid();

    // Debug
    if (TID == 0)
	{
	printf("Coucou from device tid%d", TID); //required   Device::synchronize(); after the call of kernel
	}

    // pattern entrelacement

    int s = TID;
    while (s < nTabData)
	{
	atomicAdd(&tabSM[ptrDevTabData[s]], 1);

	s += NB_THREAD;
	}
    }


__device__ void reductionInterBloc(uchar* ptrDevTabData, int nTabData, int* ptrDevHisto)
    {


    while(s < N256){

	    atomicAdd(&tabGM[tabSM[s]], 1);
	}
    }

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

